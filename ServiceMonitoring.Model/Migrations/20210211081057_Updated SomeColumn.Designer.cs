// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceMonitoring.Model;

namespace ServiceMonitoring.Model.Migrations
{
    [DbContext(typeof(ServiceMonitoringDbContext))]
    [Migration("20210211081057_Updated SomeColumn")]
    partial class UpdatedSomeColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Environment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Environments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5b4bbc4-5606-42fd-86be-b337d770fb09"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 501, DateTimeKind.Local).AddTicks(9245),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 501, DateTimeKind.Local).AddTicks(9267),
                            Name = "Development"
                        },
                        new
                        {
                            Id = new Guid("7999137c-5d0f-4b03-ad02-bdda553ed106"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(73),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(81),
                            Name = "Quality"
                        },
                        new
                        {
                            Id = new Guid("bf80c1b6-3f10-475f-995d-23855eafd789"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(85),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(86),
                            Name = "Production"
                        });
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de6910ee-006d-420c-bdfc-7c8ee76d09c7"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 498, DateTimeKind.Local).AddTicks(5192),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(8345),
                            Name = "Database"
                        },
                        new
                        {
                            Id = new Guid("727429ce-cef4-4dcf-b19a-dce07bb3b347"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9927),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9935),
                            Name = "RESTful API"
                        },
                        new
                        {
                            Id = new Guid("224c2ab1-00e2-47bc-bd69-d0661622d440"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9941),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9942),
                            Name = "Server"
                        },
                        new
                        {
                            Id = new Guid("7900f030-5d7c-43ae-bed2-e2053e5e19e5"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9946),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9947),
                            Name = "URL"
                        },
                        new
                        {
                            Id = new Guid("fa4920d8-a981-49b1-a008-58a7d535ab17"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9950),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9951),
                            Name = "Web Service"
                        },
                        new
                        {
                            Id = new Guid("6c2a8432-9f1e-4327-9cc4-13a094b68df9"),
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9954),
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 499, DateTimeKind.Local).AddTicks(9955),
                            Name = "Windows Service"
                        });
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FailedNotificationRequired")
                        .HasColumnType("bit");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationMailIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WindowsServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceEnvironments");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceOwner", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceEnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "ServiceEnvironmentId");

                    b.HasIndex("ServiceEnvironmentId");

                    b.ToTable("ServiceOwners");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastWatch")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfWatch")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceEnvironmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SuccessStatus")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ServiceEnvironmentId");

                    b.ToTable("ServiceStatuses");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceStatusLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SuccessfulStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("ServiceStatusLogs");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceWatcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WatcherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WatcherId");

                    b.ToTable("ServiceWatchers");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.UserInRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserInRoles");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Watcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AssemblyQualifiedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1cf00737-a45a-4b20-8306-3a34a135fc80"),
                            AssemblyQualifiedName = "ServiceMonitoring.Core.Watchers.SqlServerDatabaseWatcher, ServiceMonitoring.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(1398),
                            Description = "Watcher for SQL Server databases",
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(1407),
                            Name = "SqlServerDatabaseWatcher"
                        },
                        new
                        {
                            Id = new Guid("608aeaf9-8fd1-4b94-9b4c-1a37bdb3552a"),
                            AssemblyQualifiedName = "ServiceMonitoring.Core.Watchers.HttpRequestWatcher, ServiceMonitoring.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(3894),
                            Description = "Watcher for http requests",
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(3904),
                            Name = "HttpRequestWatcher"
                        },
                        new
                        {
                            Id = new Guid("fb93a7b0-57d5-4b92-af05-1d1642e9ae03"),
                            AssemblyQualifiedName = "ServiceMonitoring.Core.Watchers.PingWatcher, ServiceMonitoring.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(3970),
                            Description = "Watcher for ping requests",
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(3973),
                            Name = "PingWatcher"
                        },
                        new
                        {
                            Id = new Guid("ca00c79e-8521-465e-9670-fd8bdd6f8387"),
                            AssemblyQualifiedName = "ServiceMonitoring.Core.Watchers.WindowsServiceWatcher, ServiceMonitoring.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",
                            CreatedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(4003),
                            Description = "Watcher for Windows Services",
                            IsActive = true,
                            ModifiedOn = new DateTime(2021, 2, 11, 13, 40, 56, 502, DateTimeKind.Local).AddTicks(4005),
                            Name = "WindowsServiceWatcher"
                        });
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Service", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceEnvironment", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.Environment", "Environment")
                        .WithMany("ServiceEnvironments")
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceMonitoring.Model.Entity.Service", "Service")
                        .WithMany("ServiceEnvironments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceOwner", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceMonitoring.Model.Entity.ServiceEnvironment", "ServiceEnvironment")
                        .WithMany("ServiceOwners")
                        .HasForeignKey("ServiceEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("ServiceEnvironment");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceStatus", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.ServiceEnvironment", "ServiceEnvironment")
                        .WithMany("ServiceStatuses")
                        .HasForeignKey("ServiceEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceEnvironment");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceStatusLog", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.ServiceStatus", "ServiceStatus")
                        .WithMany("ServiceStatusLogs")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceWatcher", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.Service", "Service")
                        .WithMany("ServiceWatchers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceMonitoring.Model.Entity.Watcher", "Watcher")
                        .WithMany("ServiceWatchers")
                        .HasForeignKey("WatcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Watcher");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.UserInRole", b =>
                {
                    b.HasOne("ServiceMonitoring.Model.Entity.Role", "Role")
                        .WithMany("UserInRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceMonitoring.Model.Entity.User", "User")
                        .WithMany("UserInRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Environment", b =>
                {
                    b.Navigation("ServiceEnvironments");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Role", b =>
                {
                    b.Navigation("UserInRole");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Service", b =>
                {
                    b.Navigation("ServiceEnvironments");

                    b.Navigation("ServiceWatchers");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceEnvironment", b =>
                {
                    b.Navigation("ServiceOwners");

                    b.Navigation("ServiceStatuses");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.ServiceStatus", b =>
                {
                    b.Navigation("ServiceStatusLogs");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.User", b =>
                {
                    b.Navigation("UserInRole");
                });

            modelBuilder.Entity("ServiceMonitoring.Model.Entity.Watcher", b =>
                {
                    b.Navigation("ServiceWatchers");
                });
#pragma warning restore 612, 618
        }
    }
}
